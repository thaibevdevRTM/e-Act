@model eActForm.Models.ManagementFlow_Model
@using eActForm.Models
@{
    var typeFlow = Request["typeFlow"] == null ? "" : Request["typeFlow"];
}



<div class="row form-group">

    <div id="divSubject" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Subject</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.subjectList, new SelectList(Model.subjectList, "id", "nameTH"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlSubject" })
        </div>
    </div>
    <div id="divCus" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Customer</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.customerList, new SelectList(Model.customerList, "id", "cusNameTH"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlCustomer" })
        </div>
    </div>
    <div id="divLimit" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Limit</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.getLimitList, new SelectList(Model.getLimitList, "val1", "displayVal"), "Please Select", new { @class = "form-control txtBoxRed", id = "ddlLimit" })
        </div>
    </div>
    <div id="divProductType" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>ProductType</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.productTypeList, new SelectList(Model.productTypeList, "id", "nameTH"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlProductType" })
        </div>
    </div>
    <div id="divCate" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Cate</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.cateList, new SelectList(Model.cateList, "id", "cateName"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlCate" })
        </div>
    </div>

    <div id="divBrand" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Brand</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.productBrandList, new SelectList(Model.productBrandList, "id", "brandName"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlBrand" })
        </div>
    </div>
    <div id="divChanel" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Chanel</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.chanelList, new SelectList(Model.chanelList, "id", "chanelGroup"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlChanelGroup" })
        </div>
    </div>
    <div id="divActivityGroup" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Activity Type</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownListFor(model => model.activityGroupList, new SelectList(Model.activityGroupList, "id", "activitySales"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlActGroup" })
        </div>
    </div>
    <div id="divEmp" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Employee</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownList("employee", new SelectList(Model.empList, "empId", "empName"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlEmployee" })
        </div>
    </div>
    <div id="divDeparment" class="col-md-3">
        <div class="col-md-12 col-xs-12">
            <label>Deparment</label>
        </div>
        <div class="col-md-12 col-xs-12">
            @Html.DropDownList("deparment", new SelectList(Model.departmentMasterList, "Id", "name"), "Please Select", new { @class = "form-control txtBoxRed selectpicker", id = "ddlDeparment" })
        </div>
    </div>
</div>

<div class="row form-group" style="text-align:center;">
    <p class="d-flex justify-content-center">
        <button type="button" class="btn btn-default btn-clear-canvas" onclick="callClear();">
            <i class="fa fa fa-recycle fa-fw"></i>&nbsp;Clear
        </button>
        <button type="button" class="btn ink-reaction btn-success" onclick="submitPreview();"><i class="fa fa fa-check fa-fw"></i>&nbsp;Submit</button>
    </p>
</div>

<hr />
<div class="col-md-12">
    <div id="divApprove" class="col-md-12">
    </div>
</div>


<script type="text/javascript">
    $('.selectpicker').selectpicker({
        liveSearch: true,
        showSubtext: true
    });

    function callClear() {
         var url = '@Url.Action("Index", "ManagementFlow")';
         window.location.href = url;
    }

    function submitPreview() {
         $.ajax({
            type: 'POST',
            url: '@Url.Action("genDataApproveList", "ManagementFlow")',
             data: {
                 companyId: $("#ddlCompany").val(),
                 subjectId: $("#ddlSubject").val(),
                 customerId: $("#ddlCustomer").val(),
                 flowLimitId: $("#ddlLimit").val(),
                 productCateId: $("#ddlCate").val(),
                 channelId: $("#ddlChanelGroup").val(),
                 productBrandId: $("#ddlBrand").val(),
                 productTypeId: $("#ddlProductType").val(),
                 activityGroup: $("#ddlActGroup").val(),
                 empId: $("#ddlEmployee").val(),
                 deparmentId: $("#ddlDeparment").val(),
                 typeFlow: '@typeFlow',
             }
        }).done(function (htmlResponse) {
            $("#divApprove").html(htmlResponse);
        });
    }

    $('#ddlSubject').change(function () {

        if ($("#ddlCompany").val() == '@System.Configuration.ConfigurationManager.AppSettings["companyId_TBM"]') {
            document.getElementById("divProductType").style.display = "none";
        }
        else {
            if ('@typeFlow' == '@Activity_Model.typeFlow.flowAddOn.ToString()') {
                document.getElementById("divProductType").style.display = "block";
            }
            else {
                document.getElementById("divProductType").style.display = "none";
            }
        }


        var companyId = $("#ddlCompany").val();

        if ($("#ddlSubject").val() == 'C67164E4-A891-43D6-B4F7-090F62C6290E' || $("#ddlSubject").val() == '30A230AB-42D4-4E48-8626-4366F5901C8B')//ใบเบิกค่าใช้จ่ายเดินทาง , ใบเบิกค่ารักษาพยาบาล ,
            {
            companyId = "";
            document.getElementById("divDeparment").style.display = "none";
            document.getElementById("divEmp").style.display = "block";
        }
        else if ($("#ddlSubject").val() == '590BE88B-5FEE-4B96-9D68-EBCAC3703D7C' || $("#ddlSubject").val() == '01BAEFC4-1B6F-4327-A777-64046609F93D') // ใบเบิกค่าใช้จ่ายพนักงาน
        {
            document.getElementById("divDeparment").style.display = "none";
            document.getElementById("divEmp").style.display = "block";
        }
        else {
            document.getElementById("divDeparment").style.display = "none";
            document.getElementById("divEmp").style.display = "none";
        }


        $.ajax({
            url: '@Url.Action("getLimitBySubject", "ManagementFlow")',
            data: {
                subjectId: $("#ddlSubject").val(),
                companyId: companyId,
            },
            dataType: "json",
            type: 'POST',
             success: function (response) {
                 if (response.Data.length > 0) {
                     $("#ddlLimit option[value !='']").remove();
                    $.each(response.Data, function () {
                        $("#ddlLimit").append($("<option></option>").val(this['id']).html(this['displayVal']));

                    });
                     document.getElementById("ddlLimit").disabled = false;
                }
                else {
                     document.getElementById("ddlLimit").disabled = true;
                }
            }
        });

        $.ajax({
            url: '@Url.Action("getChannelBySubject", "ManagementFlow")',
            data: {
                subjectId: $("#ddlSubject").val(),
            },
            dataType: "json",
            type: 'POST',
            success: function (response) {
                console.log(response.Data.length);
                if (response.Data.length > 0) {
                    var data = [];
                     $("#ddlChanelGroup option[value !='']").remove();
                    $.each(response.Data, function () {
                        $("#ddlChanelGroup").append($("<option></option>").val(this['id']).html(this['chanelGroup']));

                    });
                    $('.selectpicker').selectpicker('refresh');
                }

            }
        });


    });


    $('#ddlLimit').change(function () {
        getEmp();
    });
    $('#ddlBrand').change(function () {

        if ($('#ddlSubject').val() == '@System.Configuration.ConfigurationManager.AppSettings["subjectTransferBudget"]' && $('#ddlBrand').val() != '') //ใบโอนงบ TBM
        {
            document.getElementById("divEmp").style.display = "none";
        }
        else {
            getEmp();
        } 
        
    });
    $('#ddlChanelGroup').change(function () {
        getEmp();
    });

    function getEmp() {
        var channel = $("#ddlChanelGroup").val() == "" ? $("#ddlBrand").val() : $("#ddlChanelGroup").val();
        $.ajax({
            url: '@Url.Action("getEmp", "ManagementFlow")',
            data: {
                subjectId: $("#ddlSubject").val(),
                limitId : $("#ddlLimit").val(),
                channelId: channel,
            },
            dataType: "json",
            type: 'POST',
            success: function (response) {
                console.log(response);
                 if (response.length > 0) {
                     $("#ddlEmployee option[value !='']").remove();
                    $.each(response, function () {
                        $("#ddlEmployee").append($("<option></option>").val(this['empId']).html(this['empId'] + " " + this['empName']));

                    });
                     $("#ddlEmployee").selectpicker("refresh");
                     document.getElementById("ddlEmployee").disabled = false;
                }
                else {
                     document.getElementById("ddlEmployee").disabled = true;
                }
            }
        });
    }
</script>
